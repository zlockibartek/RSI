//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceClient.ServiceReference3 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference3.IAsyncService")]
    public interface IAsyncService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncService/Fun1")]
        void Fun1(string s1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncService/Fun1")]
        System.Threading.Tasks.Task Fun1Async(string s1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncService/Fun2", ReplyAction="http://tempuri.org/IAsyncService/Fun2Response")]
        void Fun2(string s2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncService/Fun2", ReplyAction="http://tempuri.org/IAsyncService/Fun2Response")]
        System.Threading.Tasks.Task Fun2Async(string s2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsyncServiceChannel : WcfServiceClient.ServiceReference3.IAsyncService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AsyncServiceClient : System.ServiceModel.ClientBase<WcfServiceClient.ServiceReference3.IAsyncService>, WcfServiceClient.ServiceReference3.IAsyncService {
        
        public AsyncServiceClient() {
        }
        
        public AsyncServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AsyncServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Fun1(string s1) {
            base.Channel.Fun1(s1);
        }
        
        public System.Threading.Tasks.Task Fun1Async(string s1) {
            return base.Channel.Fun1Async(s1);
        }
        
        public void Fun2(string s2) {
            base.Channel.Fun2(s2);
        }
        
        public System.Threading.Tasks.Task Fun2Async(string s2) {
            return base.Channel.Fun2Async(s2);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference3.ISuperCalc", CallbackContract=typeof(WcfServiceClient.ServiceReference3.ISuperCalcCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISuperCalc {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/Factorial")]
        void Factorial(double n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/Factorial")]
        System.Threading.Tasks.Task FactorialAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/DoSomething")]
        void DoSomething(int sec);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/DoSomething")]
        System.Threading.Tasks.Task DoSomethingAsync(int sec);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/Fibonacci")]
        void Fibonacci(int n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/Fibonacci")]
        System.Threading.Tasks.Task FibonacciAsync(int n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/addRecord")]
        void addRecord(CallbackService.PersonalData data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/addRecord")]
        System.Threading.Tasks.Task addRecordAsync(CallbackService.PersonalData data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/removeRecord")]
        void removeRecord(CallbackService.PersonalData data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/removeRecord")]
        System.Threading.Tasks.Task removeRecordAsync(CallbackService.PersonalData data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/findRecord")]
        void findRecord(CallbackService.PersonalData data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/findRecord")]
        System.Threading.Tasks.Task findRecordAsync(CallbackService.PersonalData data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISuperCalcCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/FactorialResult")]
        void FactorialResult(double result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/DoSomethingResult")]
        void DoSomethingResult(string result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/FibonacciResult")]
        void FibonacciResult(int n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISuperCalc/RecordResult")]
        void RecordResult(CallbackService.PersonalData[] data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISuperCalcChannel : WcfServiceClient.ServiceReference3.ISuperCalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SuperCalcClient : System.ServiceModel.DuplexClientBase<WcfServiceClient.ServiceReference3.ISuperCalc>, WcfServiceClient.ServiceReference3.ISuperCalc {
        
        public SuperCalcClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SuperCalcClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SuperCalcClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SuperCalcClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SuperCalcClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Factorial(double n) {
            base.Channel.Factorial(n);
        }
        
        public System.Threading.Tasks.Task FactorialAsync(double n) {
            return base.Channel.FactorialAsync(n);
        }
        
        public void DoSomething(int sec) {
            base.Channel.DoSomething(sec);
        }
        
        public System.Threading.Tasks.Task DoSomethingAsync(int sec) {
            return base.Channel.DoSomethingAsync(sec);
        }
        
        public void Fibonacci(int n) {
            base.Channel.Fibonacci(n);
        }
        
        public System.Threading.Tasks.Task FibonacciAsync(int n) {
            return base.Channel.FibonacciAsync(n);
        }
        
        public void addRecord(CallbackService.PersonalData data) {
            base.Channel.addRecord(data);
        }
        
        public System.Threading.Tasks.Task addRecordAsync(CallbackService.PersonalData data) {
            return base.Channel.addRecordAsync(data);
        }
        
        public void removeRecord(CallbackService.PersonalData data) {
            base.Channel.removeRecord(data);
        }
        
        public System.Threading.Tasks.Task removeRecordAsync(CallbackService.PersonalData data) {
            return base.Channel.removeRecordAsync(data);
        }
        
        public void findRecord(CallbackService.PersonalData data) {
            base.Channel.findRecord(data);
        }
        
        public System.Threading.Tasks.Task findRecordAsync(CallbackService.PersonalData data) {
            return base.Channel.findRecordAsync(data);
        }
    }
}
